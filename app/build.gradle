plugins {
    id("kotlin-android")
}
apply plugin: 'com.android.application'

def appName = "MoonlightNext"
def appPackage = "com.su.moonlight.next"

android {
    ndkVersion "27.0.12077973"

    compileSdk 34

    namespace appPackage

    defaultConfig {
        minSdk 21
        targetSdk 34

        versionName "1.0"
        versionCode = 1

        // Generate native debug symbols to allow Google Play to symbolicate our native crashes
        ndk.debugSymbolLevel = 'FULL'
    }

    flavorDimensions.add("root")

    buildFeatures {
        buildConfig = true
    }

    productFlavors {
        root {
            maxSdk 25

            externalNativeBuild {
                ndkBuild {
                    arguments "PRODUCT_FLAVOR=root"
                }
            }

            applicationId "${appPackage}.root"
            dimension "root"
            buildConfigField "boolean", "ROOT_BUILD", "true"
        }

        nonRoot {
            externalNativeBuild {
                ndkBuild {
                    arguments "PRODUCT_FLAVOR=nonRoot"
                }
            }

            applicationId appPackage
            dimension "root"
            buildConfigField "boolean", "ROOT_BUILD", "false"
        }
    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = 17
    }

    lint {
        disable 'MissingTranslation'
        lintConfig file('lint.xml')
    }

    bundle {
        language {
            // Avoid splitting by language, since we allow users
            // to manually switch language in settings.
            enableSplit = false
        }
        density {
            // FIXME: This should not be necessary but we get
            // weird crashes due to missing drawable resources
            // when this split is enabled.
            enableSplit = false
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            resValue "string", "app_label", appName
            resValue "string", "app_label_root", "${appName} (Root)"

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            // To whomever is releasing/using an APK in release mode with
            // Moonlight's official application ID, please stop. I see every
            // single one of your crashes in my Play Console and it makes
            // Moonlight's reliability look worse and makes it more difficult
            // to distinguish real crashes from your crashy VR app. Seriously,
            // 44 of the *same* native crash in 72 hours and a few each of
            // several other crashes.
            //
            // This is technically not your fault. I would have hoped Google
            // would validate the signature of the APK before attributing
            // the crash to it. I asked their Play Store support about this
            // and they said they don't and don't have plans to, so that sucks.
            //
            // In any case, it's bad form to release an APK using someone
            // else's application ID. There is no legitimate reason, that
            // anyone would need to comment out the following line, except me
            // when I release an official signed Moonlight build. If you feel
            // like doing so would solve something, I can tell you it will not.
            // You can't upgrade an app while retaining data without having the
            // same signature as the official version. Nor can you post it on
            // the Play Store, since that application ID is already taken.
            // Reputable APK hosting websites similarly validate the signature
            // is consistent with the Play Store and won't allow an APK that
            // isn't signed the same as the original.
            //
            // I wish any and all people using Moonlight as the basis of other
            // cool projects the best of luck with their efforts. All I ask
            // is to please change the applicationId before you publish.
            //
            // TL;DR: Leave the following line alone!
            applicationIdSuffix ".release"
            resValue "string", "app_label", appName
            resValue "string", "app_label_root", "${appName} (Root)"

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.2"
    }

    buildFeatures {
        compose true
    }
}

dependencies {
    implementation 'org.bouncycastle:bcprov-jdk18on:1.77'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.77'
    implementation 'org.jcodec:jcodec:0.2.5'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'org.jmdns:jmdns:3.5.9'
    implementation 'com.github.cgutman:ShieldControllerExtensions:1.0.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.cardview:cardview:1.0.0'

    implementation 'androidx.appcompat:appcompat:1.7.0'

    def composeBom = platform('androidx.compose:compose-bom:2024.06.00')
    implementation composeBom
    androidTestImplementation composeBom

    // Material Design 3
    implementation 'androidx.compose.material3:material3'
    // or Material Design 2
    implementation 'androidx.compose.material:material'
    // or skip Material Design and build directly on top of foundational components
    implementation 'androidx.compose.foundation:foundation'
    // or only import the main APIs for the underlying toolkit systems,
    // such as input and measurement/layout
    implementation 'androidx.compose.ui:ui'

    // Android Studio Preview support
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // Optional - Included automatically by material, only add when you need
    // the icons but not the material library (e.g. when using Material3 or a
    // custom design system based on Foundation)
    implementation 'androidx.compose.material:material-icons-core'
    // Optional - Add full set of material icons
    implementation 'androidx.compose.material:material-icons-extended'

    // Optional - Integration with activities
    implementation 'androidx.activity:activity-compose:1.9.0'
    // Optional - Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.6.1'
    // Optional - Integration with LiveData
    implementation 'androidx.compose.runtime:runtime-livedata'

    implementation "androidx.navigation:navigation-compose:2.8.1"

    implementation("io.coil-kt.coil3:coil-compose:3.0.4")
    implementation("io.coil-kt.coil3:coil-network-okhttp:3.0.4")
}
